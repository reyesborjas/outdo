-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.activities
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    category_id uuid,
    creator_id uuid NOT NULL,
    location_id uuid NOT NULL,
    duration_hours numeric(5, 2) NOT NULL,
    difficulty_level character varying(20) COLLATE pg_catalog."default" NOT NULL,
    min_participants integer NOT NULL DEFAULT 1,
    max_participants integer NOT NULL,
    price_per_person numeric(10, 2) NOT NULL,
    currency_code character(3) COLLATE pg_catalog."default" NOT NULL DEFAULT 'USD'::bpchar,
    min_age integer,
    max_age integer,
    physical_requirements text COLLATE pg_catalog."default",
    included_items text COLLATE pg_catalog."default",
    excluded_items text COLLATE pg_catalog."default",
    meeting_point text COLLATE pg_catalog."default" NOT NULL,
    cancellation_policy text COLLATE pg_catalog."default",
    featured_image_url character varying(255) COLLATE pg_catalog."default",
    gallery_image_urls text[] COLLATE pg_catalog."default",
    is_available boolean DEFAULT true,
    is_public boolean DEFAULT true,
    access_code character varying(50) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    approved_by uuid,
    approved_at timestamp with time zone,
    average_rating numeric(3, 2) DEFAULT 0,
    total_reviews integer DEFAULT 0,
    total_bookings integer DEFAULT 0,
    CONSTRAINT activities_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.activity_bookings
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    activity_schedule_id uuid NOT NULL,
    explorer_id uuid NOT NULL,
    participants integer NOT NULL DEFAULT 1,
    original_participants integer,
    total_price numeric(10, 2) NOT NULL,
    booking_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    special_requests text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    cancellation_reason text COLLATE pg_catalog."default",
    canceled_at timestamp with time zone,
    CONSTRAINT activity_bookings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.activity_categories
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    icon_url character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT activity_categories_pkey PRIMARY KEY (id),
    CONSTRAINT activity_categories_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.activity_resources
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    activity_id uuid NOT NULL,
    resource_id uuid NOT NULL,
    quantity_needed integer NOT NULL DEFAULT 1,
    is_provided boolean DEFAULT true,
    is_mandatory boolean DEFAULT true,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT activity_resources_pkey PRIMARY KEY (id),
    CONSTRAINT activity_resources_activity_id_resource_id_key UNIQUE (activity_id, resource_id)
);

CREATE TABLE IF NOT EXISTS public.activity_reviews
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    activity_id uuid NOT NULL,
    explorer_id uuid NOT NULL,
    booking_id uuid NOT NULL,
    rating integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    safety_rating integer,
    knowledge_rating integer,
    equipment_rating integer,
    experience_rating integer,
    photos_urls text[] COLLATE pg_catalog."default",
    review_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_public boolean DEFAULT true,
    response_comment text COLLATE pg_catalog."default",
    response_date timestamp with time zone,
    CONSTRAINT activity_reviews_pkey PRIMARY KEY (id),
    CONSTRAINT activity_reviews_booking_id_key UNIQUE (booking_id)
);

CREATE TABLE IF NOT EXISTS public.activity_schedules
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    activity_id uuid NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    max_capacity integer NOT NULL,
    available_spots integer NOT NULL,
    price_override numeric(10, 2),
    special_instructions text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    created_by uuid NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT activity_schedules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.anchors
(
    id uuid NOT NULL,
    company_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    company_description text COLLATE pg_catalog."default",
    company_website character varying(255) COLLATE pg_catalog."default",
    company_logo_url character varying(255) COLLATE pg_catalog."default",
    business_license character varying(100) COLLATE pg_catalog."default",
    tax_id character varying(100) COLLATE pg_catalog."default",
    service_area geography,
    verified boolean DEFAULT false,
    CONSTRAINT anchors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.audit_logs
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid,
    action character varying(255) COLLATE pg_catalog."default" NOT NULL,
    entity_type character varying(100) COLLATE pg_catalog."default",
    entity_id uuid,
    old_values jsonb,
    new_values jsonb,
    ip_address character varying(50) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.booking_status_history
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    booking_id uuid NOT NULL,
    booking_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    previous_status character varying(50) COLLATE pg_catalog."default",
    new_status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    changed_by uuid,
    reason text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT booking_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.certifications
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    issuing_organization character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    validation_required boolean DEFAULT true,
    CONSTRAINT certifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.commissions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    payment_id uuid NOT NULL,
    guide_id uuid NOT NULL,
    master_guide_id uuid,
    commission_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    percentage numeric(5, 2) NOT NULL,
    amount numeric(10, 2) NOT NULL,
    currency_code character(3) COLLATE pg_catalog."default" NOT NULL DEFAULT 'USD'::bpchar,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_date timestamp with time zone,
    notes text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT commissions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.companies
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tax_id character varying(100) COLLATE pg_catalog."default",
    contact_email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    contact_phone character varying(50) COLLATE pg_catalog."default",
    logo_url character varying(255) COLLATE pg_catalog."default",
    website character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    CONSTRAINT companies_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.conversation_participants
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    conversation_id uuid NOT NULL,
    user_id uuid NOT NULL,
    joined_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    last_read_at timestamp with time zone,
    CONSTRAINT conversation_participants_pkey PRIMARY KEY (id),
    CONSTRAINT conversation_participants_conversation_id_user_id_key UNIQUE (conversation_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.conversations
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    title character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    last_message_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT conversations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.currencies
(
    code character(3) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    symbol character varying(10) COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    CONSTRAINT currencies_pkey PRIMARY KEY (code)
);

CREATE TABLE IF NOT EXISTS public.document_types
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_certification boolean DEFAULT false,
    validation_required boolean DEFAULT false,
    expiration_required boolean DEFAULT false,
    CONSTRAINT document_types_pkey PRIMARY KEY (id),
    CONSTRAINT document_types_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.expedition_activities
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expedition_id uuid NOT NULL,
    activity_id uuid NOT NULL,
    day_number integer NOT NULL,
    start_time time without time zone,
    end_time time without time zone,
    notes text COLLATE pg_catalog."default",
    assigned_guide_id uuid,
    sequence_order integer NOT NULL,
    is_optional boolean DEFAULT false,
    CONSTRAINT expedition_activities_pkey PRIMARY KEY (id),
    CONSTRAINT expedition_activities_expedition_id_activity_id_day_number__key UNIQUE (expedition_id, activity_id, day_number, sequence_order)
);

CREATE TABLE IF NOT EXISTS public.expedition_bookings
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expedition_date_id uuid NOT NULL,
    explorer_id uuid NOT NULL,
    participants integer NOT NULL DEFAULT 1,
    original_participants integer,
    total_price numeric(10, 2) NOT NULL,
    booking_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    special_requests text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    cancellation_reason text COLLATE pg_catalog."default",
    canceled_at timestamp with time zone,
    CONSTRAINT expedition_bookings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.expedition_dates
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expedition_id uuid NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    max_capacity integer NOT NULL,
    available_spots integer NOT NULL,
    price_override numeric(10, 2),
    special_instructions text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    created_by uuid NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT expedition_dates_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.expedition_resources
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expedition_id uuid NOT NULL,
    resource_id uuid NOT NULL,
    quantity_needed integer NOT NULL DEFAULT 1,
    is_provided boolean DEFAULT true,
    is_mandatory boolean DEFAULT true,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT expedition_resources_pkey PRIMARY KEY (id),
    CONSTRAINT expedition_resources_expedition_id_resource_id_key UNIQUE (expedition_id, resource_id)
);

CREATE TABLE IF NOT EXISTS public.expedition_reviews
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expedition_id uuid NOT NULL,
    explorer_id uuid NOT NULL,
    booking_id uuid NOT NULL,
    rating integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    safety_rating integer,
    knowledge_rating integer,
    equipment_rating integer,
    experience_rating integer,
    logistics_rating integer,
    photos_urls text[] COLLATE pg_catalog."default",
    review_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_public boolean DEFAULT true,
    response_comment text COLLATE pg_catalog."default",
    response_date timestamp with time zone,
    CONSTRAINT expedition_reviews_pkey PRIMARY KEY (id),
    CONSTRAINT expedition_reviews_booking_id_key UNIQUE (booking_id)
);

CREATE TABLE IF NOT EXISTS public.expedition_routes
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    expedition_id uuid NOT NULL,
    route_name character varying(255) COLLATE pg_catalog."default",
    route_path geography NOT NULL,
    total_distance numeric(10, 2),
    elevation_gain numeric(10, 2),
    elevation_loss numeric(10, 2),
    highest_point numeric(10, 2),
    lowest_point numeric(10, 2),
    difficulty_level character varying(20) COLLATE pg_catalog."default",
    estimated_duration_hours numeric(5, 2),
    checkpoints geography,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT expedition_routes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.expedition_suggestions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    explorer_id uuid NOT NULL,
    start_location_id uuid,
    difficulty_level character varying(20) COLLATE pg_catalog."default",
    estimated_duration_days integer,
    suggested_activities text[] COLLATE pg_catalog."default",
    target_guide_id uuid,
    is_public boolean DEFAULT true,
    image_urls text[] COLLATE pg_catalog."default",
    likes_count integer DEFAULT 0,
    dislikes_count integer DEFAULT 0,
    comments_count integer DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'open'::character varying,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT expedition_suggestions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.expeditions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    creator_id uuid NOT NULL,
    leader_id uuid,
    duration_days integer NOT NULL,
    difficulty_level character varying(20) COLLATE pg_catalog."default" NOT NULL,
    min_participants integer NOT NULL DEFAULT 1,
    max_participants integer NOT NULL,
    price_per_person numeric(10, 2) NOT NULL,
    currency_code character(3) COLLATE pg_catalog."default" NOT NULL DEFAULT 'USD'::bpchar,
    min_age integer,
    max_age integer,
    start_location_id uuid NOT NULL,
    end_location_id uuid,
    physical_requirements text COLLATE pg_catalog."default",
    equipment_requirements text COLLATE pg_catalog."default",
    included_items text COLLATE pg_catalog."default",
    excluded_items text COLLATE pg_catalog."default",
    cancellation_policy text COLLATE pg_catalog."default",
    featured_image_url character varying(255) COLLATE pg_catalog."default",
    gallery_image_urls text[] COLLATE pg_catalog."default",
    is_available boolean DEFAULT true,
    is_public boolean DEFAULT true,
    access_code character varying(50) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    approved_by uuid,
    approved_at timestamp with time zone,
    average_rating numeric(3, 2) DEFAULT 0,
    total_reviews integer DEFAULT 0,
    total_bookings integer DEFAULT 0,
    CONSTRAINT expeditions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.explorer_preferred_activities
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    explorer_id uuid NOT NULL,
    activity_category_id uuid NOT NULL,
    preference_level integer DEFAULT 1,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT explorer_preferred_activities_pkey PRIMARY KEY (id),
    CONSTRAINT explorer_preferred_activities_explorer_id_activity_category_key UNIQUE (explorer_id, activity_category_id)
);

CREATE TABLE IF NOT EXISTS public.explorers
(
    id uuid NOT NULL,
    points integer DEFAULT 0,
    experience_level character varying(20) COLLATE pg_catalog."default" DEFAULT 'beginner'::character varying,
    medical_conditions text COLLATE pg_catalog."default",
    special_requirements text COLLATE pg_catalog."default",
    CONSTRAINT explorers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.guide_availability
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    date_start date NOT NULL,
    date_end date NOT NULL,
    time_start time without time zone,
    time_end time without time zone,
    is_available boolean DEFAULT true,
    is_recurring boolean DEFAULT false,
    recurrence_rule text COLLATE pg_catalog."default",
    reason character varying(100) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT guide_availability_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.guide_certifications
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    certification_id uuid NOT NULL,
    certificate_number character varying(100) COLLATE pg_catalog."default",
    issue_date date NOT NULL,
    expiry_date date,
    verification_url character varying(255) COLLATE pg_catalog."default",
    document_url character varying(255) COLLATE pg_catalog."default",
    verification_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    verified_at timestamp with time zone,
    verified_by uuid,
    CONSTRAINT guide_certifications_pkey PRIMARY KEY (id),
    CONSTRAINT guide_certifications_guide_id_certification_id_certificate__key UNIQUE (guide_id, certification_id, certificate_number)
);

CREATE TABLE IF NOT EXISTS public.guide_hub_roles
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    hub_id uuid NOT NULL,
    role_id uuid NOT NULL,
    is_primary boolean DEFAULT false,
    joined_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    CONSTRAINT guide_hub_roles_pkey PRIMARY KEY (id),
    CONSTRAINT guide_hub_roles_guide_id_hub_id_role_id_key UNIQUE (guide_id, hub_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.guide_licenses
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    hub_license_id uuid NOT NULL,
    assigned_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    assigned_by uuid,
    is_active boolean DEFAULT true,
    CONSTRAINT guide_licenses_pkey PRIMARY KEY (id),
    CONSTRAINT guide_licenses_guide_id_hub_license_id_key UNIQUE (guide_id, hub_license_id)
);

CREATE TABLE IF NOT EXISTS public.guide_reviews
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    explorer_id uuid NOT NULL,
    booking_id uuid NOT NULL,
    booking_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    rating integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    knowledge_rating integer,
    communication_rating integer,
    friendliness_rating integer,
    professionalism_rating integer,
    review_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_public boolean DEFAULT true,
    response_comment text COLLATE pg_catalog."default",
    response_date timestamp with time zone,
    CONSTRAINT guide_reviews_pkey PRIMARY KEY (id),
    CONSTRAINT guide_reviews_guide_id_explorer_id_booking_id_booking_type_key UNIQUE (guide_id, explorer_id, booking_id, booking_type)
);

CREATE TABLE IF NOT EXISTS public.guide_skills
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    skill_id uuid NOT NULL,
    proficiency_level integer NOT NULL,
    verified boolean DEFAULT false,
    verified_by uuid,
    CONSTRAINT guide_skills_pkey PRIMARY KEY (id),
    CONSTRAINT guide_skills_guide_id_skill_id_key UNIQUE (guide_id, skill_id)
);

CREATE TABLE IF NOT EXISTS public.guide_teams
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    master_guide_id uuid NOT NULL,
    team_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_active boolean DEFAULT true,
    CONSTRAINT guide_teams_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.guides
(
    id uuid NOT NULL,
    guide_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    years_of_experience integer DEFAULT 0,
    bio_extended text COLLATE pg_catalog."default",
    average_rating numeric(3, 2) DEFAULT 0,
    total_reviews integer DEFAULT 0,
    total_activities_led integer DEFAULT 0,
    total_expeditions_led integer DEFAULT 0,
    available_for_hire boolean DEFAULT true,
    master_guide_id uuid,
    location_id uuid,
    created_activities_count integer DEFAULT 0,
    commission_rate numeric(5, 2) DEFAULT 10.00,
    CONSTRAINT guides_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.hub_licenses
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    hub_id uuid NOT NULL,
    package_id uuid NOT NULL,
    start_date timestamp with time zone NOT NULL,
    expiry_date timestamp with time zone NOT NULL,
    max_guides integer NOT NULL,
    current_guides_count integer DEFAULT 0,
    license_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    payment_id uuid,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT hub_licenses_pkey PRIMARY KEY (id),
    CONSTRAINT hub_licenses_license_key_key UNIQUE (license_key)
);

CREATE TABLE IF NOT EXISTS public.hub_roles
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    hub_id uuid NOT NULL,
    template_id uuid,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    permissions jsonb,
    hierarchy_level integer DEFAULT 1,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_active boolean DEFAULT true,
    CONSTRAINT hub_roles_pkey PRIMARY KEY (id),
    CONSTRAINT hub_roles_hub_id_name_key UNIQUE (hub_id, name)
);

CREATE TABLE IF NOT EXISTS public.hubs
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    company_id uuid NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    configuration jsonb,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_active boolean DEFAULT true,
    CONSTRAINT hubs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.license_packages
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    max_guides integer,
    features jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT license_packages_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.locations
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    coordinates geography NOT NULL,
    address text COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state_province character varying(100) COLLATE pg_catalog."default",
    country character varying(100) COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(20) COLLATE pg_catalog."default",
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    elevation numeric(10, 2),
    timezone character varying(50) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    created_by uuid,
    is_verified boolean DEFAULT false,
    CONSTRAINT locations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.medical_exams
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    exam_date date NOT NULL,
    exam_type character varying(100) COLLATE pg_catalog."default" NOT NULL,
    exam_result text COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    CONSTRAINT medical_exams_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.messages
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    sender_id uuid NOT NULL,
    recipient_id uuid NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    is_read boolean DEFAULT false,
    read_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    attachments_urls text[] COLLATE pg_catalog."default",
    CONSTRAINT messages_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    notification_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    related_id uuid,
    related_type character varying(50) COLLATE pg_catalog."default",
    is_read boolean DEFAULT false,
    read_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    booking_id uuid NOT NULL,
    booking_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    amount numeric(10, 2) NOT NULL,
    currency_code character(3) COLLATE pg_catalog."default" NOT NULL DEFAULT 'USD'::bpchar,
    payment_method character varying(50) COLLATE pg_catalog."default" NOT NULL,
    transaction_id character varying(255) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    receipt_url character varying(255) COLLATE pg_catalog."default",
    notes text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.point_rewards
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    points_required integer NOT NULL,
    reward_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    discount_percentage numeric(5, 2),
    discount_amount numeric(10, 2),
    valid_from timestamp with time zone,
    valid_until timestamp with time zone,
    is_active boolean DEFAULT true,
    stock_available integer,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT point_rewards_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.point_transactions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    explorer_id uuid NOT NULL,
    points integer NOT NULL,
    transaction_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    reference_id uuid,
    reference_type character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    balance_after integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT point_transactions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.promotion_requests
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    guide_id uuid NOT NULL,
    current_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    requested_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    approver_id uuid,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    reasons text COLLATE pg_catalog."default" NOT NULL,
    supporting_documents text[] COLLATE pg_catalog."default",
    decision_notes text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    decided_at timestamp with time zone,
    CONSTRAINT promotion_requests_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.resource_categories
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT resource_categories_pkey PRIMARY KEY (id),
    CONSTRAINT resource_categories_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.resources
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category_id uuid NOT NULL,
    owner_id uuid NOT NULL,
    owner_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL DEFAULT 1,
    available_quantity integer NOT NULL DEFAULT 1,
    unit_price numeric(10, 2),
    specifications jsonb,
    condition character varying(50) COLLATE pg_catalog."default" DEFAULT 'good'::character varying,
    image_url character varying(255) COLLATE pg_catalog."default",
    is_available boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT resources_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reward_redemptions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    explorer_id uuid NOT NULL,
    reward_id uuid NOT NULL,
    points_used integer NOT NULL,
    redemption_code character varying(100) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    redeemed_at timestamp with time zone,
    expires_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reward_redemptions_pkey PRIMARY KEY (id),
    CONSTRAINT reward_redemptions_redemption_code_key UNIQUE (redemption_code)
);

CREATE TABLE IF NOT EXISTS public.role_templates
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    default_permissions jsonb,
    is_system boolean DEFAULT false,
    CONSTRAINT role_templates_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.skills
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT skills_pkey PRIMARY KEY (id),
    CONSTRAINT skills_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.suggestion_comments
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    suggestion_id uuid NOT NULL,
    user_id uuid NOT NULL,
    comment text COLLATE pg_catalog."default" NOT NULL,
    parent_comment_id uuid,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_edited boolean DEFAULT false,
    CONSTRAINT suggestion_comments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.suggestion_votes
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    suggestion_id uuid NOT NULL,
    user_id uuid NOT NULL,
    vote_type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    voted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT suggestion_votes_pkey PRIMARY KEY (id),
    CONSTRAINT suggestion_votes_suggestion_id_user_id_key UNIQUE (suggestion_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.system_settings
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    data_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_public boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT system_settings_pkey PRIMARY KEY (id),
    CONSTRAINT system_settings_setting_key_key UNIQUE (setting_key)
);

CREATE TABLE IF NOT EXISTS public.team_members
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    team_id uuid NOT NULL,
    guide_id uuid NOT NULL,
    role_in_team character varying(50) COLLATE pg_catalog."default",
    joined_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_active boolean DEFAULT true,
    CONSTRAINT team_members_pkey PRIMARY KEY (id),
    CONSTRAINT team_members_team_id_guide_id_key UNIQUE (team_id, guide_id)
);

CREATE TABLE IF NOT EXISTS public.user_addresses
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    address_line1 character varying(255) COLLATE pg_catalog."default",
    address_line2 character varying(255) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state_province character varying(100) COLLATE pg_catalog."default",
    country character varying(100) COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(20) COLLATE pg_catalog."default",
    is_primary boolean DEFAULT true,
    is_current boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_addresses_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_documents
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    document_type_id uuid NOT NULL,
    document_number character varying(100) COLLATE pg_catalog."default",
    issue_date date NOT NULL,
    expiry_date date,
    document_url character varying(255) COLLATE pg_catalog."default",
    verification_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    verified_at timestamp with time zone,
    verified_by uuid,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT user_documents_pkey PRIMARY KEY (id),
    CONSTRAINT user_documents_user_id_document_type_id_document_number_key UNIQUE (user_id, document_type_id, document_number)
);

CREATE TABLE IF NOT EXISTS public.user_sessions
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    ip_address character varying(50) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    is_valid boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp with time zone NOT NULL,
    last_activity_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
    CONSTRAINT user_sessions_token_key UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(50) COLLATE pg_catalog."default",
    profile_image_url character varying(255) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    date_of_birth date,
    nationality character varying(100) COLLATE pg_catalog."default",
    emergency_contact_name character varying(100) COLLATE pg_catalog."default",
    emergency_contact_phone character varying(50) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    last_login_at timestamp with time zone,
    is_active boolean DEFAULT true,
    account_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    user_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    default_address_id uuid,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.activities
    ADD CONSTRAINT activities_approved_by_fkey FOREIGN KEY (approved_by)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.activities
    ADD CONSTRAINT activities_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.activity_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_activities_category_id
    ON public.activities(category_id);


ALTER TABLE IF EXISTS public.activities
    ADD CONSTRAINT activities_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_activities_creator_id
    ON public.activities(creator_id);


ALTER TABLE IF EXISTS public.activities
    ADD CONSTRAINT activities_currency_code_fkey FOREIGN KEY (currency_code)
    REFERENCES public.currencies (code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.activities
    ADD CONSTRAINT activities_location_id_fkey FOREIGN KEY (location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_activities_location_id
    ON public.activities(location_id);


ALTER TABLE IF EXISTS public.activity_bookings
    ADD CONSTRAINT activity_bookings_activity_schedule_id_fkey FOREIGN KEY (activity_schedule_id)
    REFERENCES public.activity_schedules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.activity_bookings
    ADD CONSTRAINT activity_bookings_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_activity_bookings_explorer_id
    ON public.activity_bookings(explorer_id);


ALTER TABLE IF EXISTS public.activity_resources
    ADD CONSTRAINT activity_resources_activity_id_fkey FOREIGN KEY (activity_id)
    REFERENCES public.activities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.activity_resources
    ADD CONSTRAINT activity_resources_resource_id_fkey FOREIGN KEY (resource_id)
    REFERENCES public.resources (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.activity_reviews
    ADD CONSTRAINT activity_reviews_activity_id_fkey FOREIGN KEY (activity_id)
    REFERENCES public.activities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.activity_reviews
    ADD CONSTRAINT activity_reviews_booking_id_fkey FOREIGN KEY (booking_id)
    REFERENCES public.activity_bookings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS activity_reviews_booking_id_key
    ON public.activity_reviews(booking_id);


ALTER TABLE IF EXISTS public.activity_reviews
    ADD CONSTRAINT activity_reviews_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.activity_schedules
    ADD CONSTRAINT activity_schedules_activity_id_fkey FOREIGN KEY (activity_id)
    REFERENCES public.activities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_activity_schedules_activity_id
    ON public.activity_schedules(activity_id);


ALTER TABLE IF EXISTS public.activity_schedules
    ADD CONSTRAINT activity_schedules_created_by_fkey FOREIGN KEY (created_by)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.anchors
    ADD CONSTRAINT anchors_id_fkey FOREIGN KEY (id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS anchors_pkey
    ON public.anchors(id);


ALTER TABLE IF EXISTS public.audit_logs
    ADD CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.booking_status_history
    ADD CONSTRAINT booking_status_history_changed_by_fkey FOREIGN KEY (changed_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.commissions
    ADD CONSTRAINT commissions_currency_code_fkey FOREIGN KEY (currency_code)
    REFERENCES public.currencies (code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.commissions
    ADD CONSTRAINT commissions_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_commissions_guide_id
    ON public.commissions(guide_id);


ALTER TABLE IF EXISTS public.commissions
    ADD CONSTRAINT commissions_master_guide_id_fkey FOREIGN KEY (master_guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.commissions
    ADD CONSTRAINT commissions_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES public.payments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.conversation_participants
    ADD CONSTRAINT conversation_participants_conversation_id_fkey FOREIGN KEY (conversation_id)
    REFERENCES public.conversations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.conversation_participants
    ADD CONSTRAINT conversation_participants_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_activities
    ADD CONSTRAINT expedition_activities_activity_id_fkey FOREIGN KEY (activity_id)
    REFERENCES public.activities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_activities
    ADD CONSTRAINT expedition_activities_assigned_guide_id_fkey FOREIGN KEY (assigned_guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expedition_activities
    ADD CONSTRAINT expedition_activities_expedition_id_fkey FOREIGN KEY (expedition_id)
    REFERENCES public.expeditions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_bookings
    ADD CONSTRAINT expedition_bookings_expedition_date_id_fkey FOREIGN KEY (expedition_date_id)
    REFERENCES public.expedition_dates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_bookings
    ADD CONSTRAINT expedition_bookings_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_expedition_bookings_explorer_id
    ON public.expedition_bookings(explorer_id);


ALTER TABLE IF EXISTS public.expedition_dates
    ADD CONSTRAINT expedition_dates_created_by_fkey FOREIGN KEY (created_by)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expedition_dates
    ADD CONSTRAINT expedition_dates_expedition_id_fkey FOREIGN KEY (expedition_id)
    REFERENCES public.expeditions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_expedition_dates_expedition_id
    ON public.expedition_dates(expedition_id);


ALTER TABLE IF EXISTS public.expedition_resources
    ADD CONSTRAINT expedition_resources_expedition_id_fkey FOREIGN KEY (expedition_id)
    REFERENCES public.expeditions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_resources
    ADD CONSTRAINT expedition_resources_resource_id_fkey FOREIGN KEY (resource_id)
    REFERENCES public.resources (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_reviews
    ADD CONSTRAINT expedition_reviews_booking_id_fkey FOREIGN KEY (booking_id)
    REFERENCES public.expedition_bookings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS expedition_reviews_booking_id_key
    ON public.expedition_reviews(booking_id);


ALTER TABLE IF EXISTS public.expedition_reviews
    ADD CONSTRAINT expedition_reviews_expedition_id_fkey FOREIGN KEY (expedition_id)
    REFERENCES public.expeditions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_reviews
    ADD CONSTRAINT expedition_reviews_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.expedition_routes
    ADD CONSTRAINT expedition_routes_expedition_id_fkey FOREIGN KEY (expedition_id)
    REFERENCES public.expeditions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_expedition_routes_expedition_id
    ON public.expedition_routes(expedition_id);


ALTER TABLE IF EXISTS public.expedition_suggestions
    ADD CONSTRAINT expedition_suggestions_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_expedition_suggestions_explorer_id
    ON public.expedition_suggestions(explorer_id);


ALTER TABLE IF EXISTS public.expedition_suggestions
    ADD CONSTRAINT expedition_suggestions_start_location_id_fkey FOREIGN KEY (start_location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expedition_suggestions
    ADD CONSTRAINT expedition_suggestions_target_guide_id_fkey FOREIGN KEY (target_guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expeditions
    ADD CONSTRAINT expeditions_approved_by_fkey FOREIGN KEY (approved_by)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expeditions
    ADD CONSTRAINT expeditions_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expeditions
    ADD CONSTRAINT expeditions_currency_code_fkey FOREIGN KEY (currency_code)
    REFERENCES public.currencies (code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expeditions
    ADD CONSTRAINT expeditions_end_location_id_fkey FOREIGN KEY (end_location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.expeditions
    ADD CONSTRAINT expeditions_leader_id_fkey FOREIGN KEY (leader_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_expeditions_leader_id
    ON public.expeditions(leader_id);


ALTER TABLE IF EXISTS public.expeditions
    ADD CONSTRAINT expeditions_start_location_id_fkey FOREIGN KEY (start_location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.explorer_preferred_activities
    ADD CONSTRAINT explorer_preferred_activities_activity_category_id_fkey FOREIGN KEY (activity_category_id)
    REFERENCES public.activity_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.explorer_preferred_activities
    ADD CONSTRAINT explorer_preferred_activities_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.explorers
    ADD CONSTRAINT explorers_id_fkey FOREIGN KEY (id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS explorers_pkey
    ON public.explorers(id);


ALTER TABLE IF EXISTS public.guide_availability
    ADD CONSTRAINT guide_availability_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_certifications
    ADD CONSTRAINT guide_certifications_certification_id_fkey FOREIGN KEY (certification_id)
    REFERENCES public.certifications (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_certifications
    ADD CONSTRAINT guide_certifications_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_certifications
    ADD CONSTRAINT guide_certifications_verified_by_fkey FOREIGN KEY (verified_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.guide_hub_roles
    ADD CONSTRAINT guide_hub_roles_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_guide_hub_roles_guide_id
    ON public.guide_hub_roles(guide_id);


ALTER TABLE IF EXISTS public.guide_hub_roles
    ADD CONSTRAINT guide_hub_roles_hub_id_fkey FOREIGN KEY (hub_id)
    REFERENCES public.hubs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_guide_hub_roles_hub_id
    ON public.guide_hub_roles(hub_id);


ALTER TABLE IF EXISTS public.guide_hub_roles
    ADD CONSTRAINT guide_hub_roles_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.hub_roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_licenses
    ADD CONSTRAINT guide_licenses_assigned_by_fkey FOREIGN KEY (assigned_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.guide_licenses
    ADD CONSTRAINT guide_licenses_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_licenses
    ADD CONSTRAINT guide_licenses_hub_license_id_fkey FOREIGN KEY (hub_license_id)
    REFERENCES public.hub_licenses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_reviews
    ADD CONSTRAINT guide_reviews_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_reviews
    ADD CONSTRAINT guide_reviews_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_skills
    ADD CONSTRAINT guide_skills_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_skills
    ADD CONSTRAINT guide_skills_skill_id_fkey FOREIGN KEY (skill_id)
    REFERENCES public.skills (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guide_skills
    ADD CONSTRAINT guide_skills_verified_by_fkey FOREIGN KEY (verified_by)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.guide_teams
    ADD CONSTRAINT guide_teams_master_guide_id_fkey FOREIGN KEY (master_guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guides
    ADD CONSTRAINT fk_guide_location FOREIGN KEY (location_id)
    REFERENCES public.locations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.guides
    ADD CONSTRAINT guides_id_fkey FOREIGN KEY (id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS guides_pkey
    ON public.guides(id);


ALTER TABLE IF EXISTS public.guides
    ADD CONSTRAINT guides_master_guide_id_fkey FOREIGN KEY (master_guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_guides_master_guide_id
    ON public.guides(master_guide_id);


ALTER TABLE IF EXISTS public.hub_licenses
    ADD CONSTRAINT hub_licenses_hub_id_fkey FOREIGN KEY (hub_id)
    REFERENCES public.hubs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.hub_licenses
    ADD CONSTRAINT hub_licenses_package_id_fkey FOREIGN KEY (package_id)
    REFERENCES public.license_packages (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.hub_roles
    ADD CONSTRAINT hub_roles_hub_id_fkey FOREIGN KEY (hub_id)
    REFERENCES public.hubs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.hub_roles
    ADD CONSTRAINT hub_roles_template_id_fkey FOREIGN KEY (template_id)
    REFERENCES public.role_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.hubs
    ADD CONSTRAINT hubs_company_id_fkey FOREIGN KEY (company_id)
    REFERENCES public.companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.locations
    ADD CONSTRAINT locations_created_by_fkey FOREIGN KEY (created_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.medical_exams
    ADD CONSTRAINT medical_exams_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_recipient_id_fkey FOREIGN KEY (recipient_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_messages_recipient_id
    ON public.messages(recipient_id);


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_messages_sender_id
    ON public.messages(sender_id);


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_notifications_user_id
    ON public.notifications(user_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_currency_code_fkey FOREIGN KEY (currency_code)
    REFERENCES public.currencies (code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.point_transactions
    ADD CONSTRAINT point_transactions_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.promotion_requests
    ADD CONSTRAINT promotion_requests_approver_id_fkey FOREIGN KEY (approver_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.promotion_requests
    ADD CONSTRAINT promotion_requests_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_promotion_requests_guide_id
    ON public.promotion_requests(guide_id);


ALTER TABLE IF EXISTS public.resources
    ADD CONSTRAINT resources_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.resource_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resources
    ADD CONSTRAINT resources_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reward_redemptions
    ADD CONSTRAINT reward_redemptions_explorer_id_fkey FOREIGN KEY (explorer_id)
    REFERENCES public.explorers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reward_redemptions
    ADD CONSTRAINT reward_redemptions_reward_id_fkey FOREIGN KEY (reward_id)
    REFERENCES public.point_rewards (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.suggestion_comments
    ADD CONSTRAINT suggestion_comments_parent_comment_id_fkey FOREIGN KEY (parent_comment_id)
    REFERENCES public.suggestion_comments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.suggestion_comments
    ADD CONSTRAINT suggestion_comments_suggestion_id_fkey FOREIGN KEY (suggestion_id)
    REFERENCES public.expedition_suggestions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.suggestion_comments
    ADD CONSTRAINT suggestion_comments_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.suggestion_votes
    ADD CONSTRAINT suggestion_votes_suggestion_id_fkey FOREIGN KEY (suggestion_id)
    REFERENCES public.expedition_suggestions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.suggestion_votes
    ADD CONSTRAINT suggestion_votes_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.team_members
    ADD CONSTRAINT team_members_guide_id_fkey FOREIGN KEY (guide_id)
    REFERENCES public.guides (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.team_members
    ADD CONSTRAINT team_members_team_id_fkey FOREIGN KEY (team_id)
    REFERENCES public.guide_teams (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_addresses
    ADD CONSTRAINT user_addresses_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_user_addresses_primary
    ON public.user_addresses(user_id);


ALTER TABLE IF EXISTS public.user_documents
    ADD CONSTRAINT user_documents_document_type_id_fkey FOREIGN KEY (document_type_id)
    REFERENCES public.document_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_documents
    ADD CONSTRAINT user_documents_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_documents
    ADD CONSTRAINT user_documents_verified_by_fkey FOREIGN KEY (verified_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_sessions
    ADD CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_default_address FOREIGN KEY (default_address_id)
    REFERENCES public.user_addresses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

END;